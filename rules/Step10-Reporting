# vim: set filetype=sh :

rule R_finalReport:
    """
    Create the final report (R).
    """
    input:
        script=config["report-script"],
        fa="%s/FASTQ/TRIMMED/GSC.vcf.fa" % (config["project-folder"]),
        mockToRef="%s/BAM/Mockref/mockToRef.sorted.bam" % (config["project-folder"]),
        mqcraw="%s/QC/RAW/multiqc_R1/" % (config["project-folder"]),
        mqcconcatenated="%s/QC/CONCATENATED/multiqc_R1/" % (config["project-folder"]),
        mqctrimmed="%s/QC/TRIMMED/multiqc_R1/" % (config["project-folder"]),
        faRef="%s/MPILEUP/mpileup_reference/GSC.vcf.fa" % (config["project-folder"])
    output:
        "%s/finalReport.html" % (config["project-folder"])
    log:
        "%s/logs/R/finalReport.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/R/finalReport.benchmark.tsv" % (config["project-folder"])
    container:
        "docker://fischuu/r-gbs:3.6.3-0.2"
    params:
       projFolder=config["project-folder"],
       pipeFolder=config["pipeline-folder"],
       pipeConfig=config["pipeline-config"],
       refGenome=config["genome"]
    shell:"""
       R -e "projFolder <- '{params.projFolder}'; \
             pipelineFolder <- '{params.pipeFolder}'; \
             refGenome.file <- '{params.refGenome}'; \
             pipelineConfig <- '{params.pipeConfig}'; \
             snakemake <- TRUE;\
             rmarkdown::render('{input.script}',output_file='{output}')" &> {log}
    """
