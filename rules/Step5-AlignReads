if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule Step5_0_AlignReadsToReference:
        """
        Align reads to the Reference Genome (BWA).
        """
        input:
            reference="%s" % (config["genome"]),
            refFiles="%s" % (config["genome-bwa-index"]),
            R1="%s/FASTQ/TRIMMED/{samples}.R1.fq.gz" % (config["project-folder"]),
            R2="%s/FASTQ/TRIMMED/{samples}.R2.fq.gz" % (config["project-folder"]),
        output:
            temp("%s/FASTQ/TRIMMED/alignments_reference/{samples}.sam" % (config["project-folder"]))
        log:
            "%s/logs/Step5_0-AlignRefGenome-{samples}.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step5_0-AlignRefGenome-{samples}.benchmark.tsv" % (config["project-folder"])
        threads: lambda cores: cpu_count()
        singularity: config["singularity"]["gbs"]
        shell:"""
            echo "Number of threads used:" {threads}
            bwa mem -t {threads} -M {input.reference} {input.R1} {input.R2} > {output} 2> {log}
      	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule Step5_1_SamToSortedBamReference:
        """
        Sam to sorted bam for reference genome bam (SAMTOOLS)
        """
        input:
            "%s/FASTQ/TRIMMED/alignments_reference/{samples}.sam" % (config["project-folder"])
        output:
            bam=temp("%s/FASTQ/TRIMMED/alignments_reference/{samples}.bam" % (config["project-folder"])),
            sorted="%s/FASTQ/TRIMMED/alignments_reference/{samples}.sorted.bam" % (config["project-folder"])
        log:
            "%s/logs/Step5_1-SamToSortedBamRefGenome-{samples}.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step5_1-SamToSortedBamRefGenome-{samples}.benchmark.tsv" % (config["project-folder"])
        threads: lambda cores: cpu_count()
        params:
            q=config["params"]["step5d"]["q"],
            f=config["params"]["step5d"]["f"],
            F=config["params"]["step5d"]["F"]
        singularity: config["singularity"]["gbs"]
        shell:"""
            echo "Number of threads used:" {threads}
            samtools view -b -q {params.q} -f {params.f} -F {params.F} {input} > {output.bam}
            samtools sort {output.bam} -o {output.sorted}
            samtools index {output.sorted}
      	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule Step5_2_SortedBamToMpileupReference:
        """
        Get Mpileup for Mock Reference Genome.
        """
        input:
            bam="%s/FASTQ/TRIMMED/alignments_reference/{samples}.sorted.bam" % (config["project-folder"]),
            reference="%s" % (config["genome"])
        output:
            "%s/MPILEUP/mpileup_reference/{samples}.mpileup" % (config["project-folder"])
        log:
            "%s/logs/Step5_2-SortedBamToMpileupReference-{samples}.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step5_2-SortedBamToMpileupReference-{samples}.benchmark.tsv" % (config["project-folder"])
        threads: lambda cores: cpu_count()
        params:
            Q=config["params"]["step5d"]["Q"],
            q=config["params"]["step5d"]["q"]
        singularity: config["singularity"]["gbs"]
        shell:"""
            echo "Number of threads used:" {threads}
            samtools mpileup -Q {params.Q} -q {params.q} -B -C 50 -f {input.reference} {input.bam} > {output}
      	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule Step5_3_AlignmentStatsReference:
        """
        Get the mapping stats for the reference.
        """
        input:
            sam="%s/FASTQ/TRIMMED/alignments_reference/{samples}.sam" % (config["project-folder"]),
            sbam="%s/FASTQ/TRIMMED/alignments_reference/{samples}.sorted.bam" % (config["project-folder"])
        output:
            fs="%s/FASTQ/TRIMMED/alignments_reference/{samples}.sam.flagstat" % (config["project-folder"]),
            c="%s/FASTQ/TRIMMED/alignments_reference/{samples}.coverage" % (config["project-folder"])
        log:
            "%s/logs/step5_3_{samples}.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/step5_3.benchmark_{samples}.tsv" % (config["project-folder"])
        threads: lambda cores: cpu_count()
        singularity: config["singularity"]["gbs"]
        shell:"""
            echo "Number of threads used:" {threads}
            samtools flagstat {input.sam} > {output.fs}
            samtools idxstats {input.sbam} | awk '{{print $1\" \"$3}}' > {output.c}
      	"""

rule Step5_AlignmentStats:
    """
    Align with BWA-mem and process with SAMTools.
    """
    input:
        "%s/FASTQ/TRIMMED/alignments/{samples}.sam" % (config["project-folder"])
    output:
        "%s/FASTQ/TRIMMED/alignments/{samples}.sam.flagstat" % (config["project-folder"])
    log:
        "%s/logs/step5_{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/step5.benchmark_{samples}.tsv" % (config["project-folder"])
    singularity: config["singularity"]["gbs"]
    shell:"""
        samtools flagstat {input} > {output}
  	"""

rule Step5b_AlignReadsToGenome:
    """
    Align reads to the mock reference Genome.
    """
    input:
        reference="%s/FASTQ/TRIMMED/GSC.MR.Genome.fa" % (config["project-folder"]),
        refFiles="%s/FASTQ/TRIMMED/GSC.MR.Genome.fa.bwt" % (config["project-folder"]),
        R1="%s/FASTQ/TRIMMED/{samples}.R1.fq.gz" % (config["project-folder"]),
        R2="%s/FASTQ/TRIMMED/{samples}.R2.fq.gz" % (config["project-folder"]),
    output:
        temp("%s/FASTQ/TRIMMED/alignments/{samples}.sam" % (config["project-folder"]))
    log:
        "%s/logs/Step5b-AlignGenome-{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Step5b-AlignGenome-{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        threads=config["params"]["step5b"]["threads"],
    singularity: config["singularity"]["gbs"]
    shell:"""
        bwa mem -t {params.threads} -M {input.reference} {input.R1} {input.R2} > {output} 2> {log}
  	"""

rule Step5c_AlignReadsToClusters:
    """
    Index the Mock Reference Genome Clusters.
    """
    input:
        reference="%s/FASTQ/TRIMMED/GSC.MR.Clusters.fa" % (config["project-folder"]),
        refFiles="%s/FASTQ/TRIMMED/GSC.MR.Clusters.fa.bwt" % (config["project-folder"]),
        R1="%s/FASTQ/TRIMMED/{samples}.R1.fq.gz" % (config["project-folder"]),
        R2="%s/FASTQ/TRIMMED/{samples}.R2.fq.gz" % (config["project-folder"]),
    output:
        temp("%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sam" % (config["project-folder"]))
    log:
        "%s/logs/Step5c-AlignClusters-{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Step5c-AlignClusters-{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        threads=config["params"]["step5c"]["threads"],
    singularity: config["singularity"]["gbs"]
    shell:"""
        bwa mem -t {params.threads} -M {input.reference} {input.R1} {input.R2} > {output} 2> {log}
  	"""
  	
rule Step5d_SamToSortedBamGenome:
    """
    Sam to sorted bam for mock reference (SAMTOOLS)
    """
    input:
        "%s/FASTQ/TRIMMED/alignments/{samples}.sam" % (config["project-folder"])
    output:
        bam=temp("%s/FASTQ/TRIMMED/alignments/{samples}.bam" % (config["project-folder"])),
        sorted="%s/FASTQ/TRIMMED/alignments/{samples}.sorted.bam" % (config["project-folder"])
    log:
        "%s/logs/Step5d-SamToSortedBamGenome-{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Step5d-SamToSortedBamGenome-{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        threads=config["params"]["step5d"]["threads"],
        q=config["params"]["step5d"]["q"],
        f=config["params"]["step5d"]["f"],
        F=config["params"]["step5d"]["F"]
    singularity: config["singularity"]["gbs"]
    shell:"""
        samtools view -b -q {params.q} -f {params.f} -F {params.F} {input} > {output.bam}
        samtools sort {output.bam} -o {output.sorted}
        samtools index {output.sorted}
  	"""

rule Step5e_SamToSortedBamClusters:
    """
    Index the Mock Reference Clusters.
    """
    input:
        "%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sam" % (config["project-folder"])
    output:
        bam=temp("%s/FASTQ/TRIMMED/alignments_clusters/{samples}.bam" % (config["project-folder"])),
        sorted="%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sorted.bam" % (config["project-folder"])
    log:
        "%s/logs/Step5e-SamToSortedBamClusters-{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Step5e-SamToSortedBamClusters-{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        threads=config["params"]["step5e"]["threads"],
        q=config["params"]["step5e"]["q"],
        f=config["params"]["step5e"]["f"],
        F=config["params"]["step5e"]["F"]
    singularity: config["singularity"]["gbs"]
    shell:"""
        samtools view -b -q {params.q} -f {params.f} -F {params.F} {input} > {output.bam}
        samtools sort {output.bam} -o {output.sorted}
        samtools index {output.sorted}
  	"""

rule Step5f_SortedBamToMpileup:
    """
    Get Mpileup for Mock Reference Genome.
    """
    input:
        bam="%s/FASTQ/TRIMMED/alignments/{samples}.sorted.bam" % (config["project-folder"]),
        reference="%s/FASTQ/TRIMMED/GSC.MR.Genome.fa" % (config["project-folder"])
    output:
        bam="%s/FASTQ/TRIMMED/{samples}.mpileup" % (config["project-folder"])
    log:
        "%s/logs/Step5f-SortedBamToMpileup-{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Step5f-SortedBamToMpileup-{samples}.benchmark.tsv" % (config["project-folder"])
    params:
        threads=config["params"]["step5d"]["threads"],
        Q=config["params"]["step5d"]["Q"],
        q=config["params"]["step5d"]["q"]
    singularity: config["singularity"]["gbs"]
    shell:"""
        samtools mpileup -Q {params.Q} -q {params.q} -B -C 50 -f {input.reference} {input.bam} > {output}
  	"""

rule Step5g_AlignmentStatsClusters:
    """
    Align with BWA-mem and process with SAMTools.
    """
    input:
        sam=temp("%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sam" % (config["project-folder"])),
        sbam="%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sorted.bam" % (config["project-folder"])
    output:
        fs="%s/FASTQ/TRIMMED/alignments_clusters/{samples}.sam.flagstat" % (config["project-folder"]),
        c="%s/FASTQ/TRIMMED/alignments_clusters/{samples}.coverage" % (config["project-folder"])
    log:
        "%s/logs/step5h_{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/step5h.benchmark_{samples}.tsv" % (config["project-folder"])
    singularity: config["singularity"]["gbs"]
    shell:"""
        samtools flagstat {input.sam} > {output.fs}
        samtools idxstats {input.sbam} | awk '{{print $1\" \"$3}}' > {output.c}
  	"""

