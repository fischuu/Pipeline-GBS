# Create the count and ref files
################################################################################

rule ParseMpileup_createCountFiles:
    """
    Parse mpileup outputs and create count/ref files
    """
    input:
        "%s/FASTQ/TRIMMED/{samples}.mpileup" % (config["project-folder"])
    output:
        counts=temp("%s/FASTQ/TRIMMED/{samples}.count.txt" % (config["project-folder"])),
        ref=temp("%s/FASTQ/TRIMMED/{samples}.ref.txt" % (config["project-folder"]))
    params:
        p=config["params"]["step6"]["p"],
        wd="%s/FASTQ/TRIMMED" % config["project-folder"],
        pipefolder=config["pipeline-folder"]
    log:
        "%s/logs/step6_0.{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/step6_0.{samples}.benchmark.tsv" % (config["project-folder"])
    threads: 1
    shell:"""
        cd {params.wd}
        perl {params.pipefolder}/scripts/GBS-SNP-CROP-6_1.pl -b {input} -p {params.p} &> {log}
  	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule ParseMpileup_createCountFiles_reference:
        """
        Parse mpileup outputs and create count/ref files for reference genome
        """
        input:
            "%s/MPILEUP/mpileup_reference/{samples}.mpileup" % (config["project-folder"])
        output:
            counts=temp("%s/MPILEUP/mpileup_reference/{samples}.count.txt" % (config["project-folder"])),
            ref=temp("%s/MPILEUP/mpileup_reference/{samples}.ref.txt" % (config["project-folder"]))
        params:
            p=config["params"]["step6"]["p"],
            wd="%s/MPILEUP/mpileup_reference" % config["project-folder"],
            pipefolder=config["pipeline-folder"]
        log:
            "%s/logs/step6_0_reference.{samples}.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/step6_0_reference.{samples}.benchmark.tsv" % (config["project-folder"])
        threads: 1
        shell:"""
            cd {params.wd}
            perl {params.pipefolder}/scripts/GBS-SNP-CROP-6_1.pl -b {input} -p {params.p} &> {log}
      	"""
  	
# Create the verticalRef files
################################################################################

rule create_verticalRef:
    """
    Merge the separate ref files
    """
    input:
        expand("%s/FASTQ/TRIMMED/{samples}.ref.txt" % (config["project-folder"]), samples=samples),
    output:
       vref=temp("%s/FASTQ/TRIMMED/VerticalRefPos.txt" % (config["project-folder"])),
       counts=temp("%s/FASTQ/TRIMMED/CountFileList.txt" % (config["project-folder"]))
    log:
       "%s/logs/step6_createVerticalRef.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/step6_createVerticalRef.benchmark.tsv" % (config["project-folder"])
    params:
        wd="%s/FASTQ/TRIMMED" % config["project-folder"],
    threads: 1
    shell:"""
        sort -u -m -k2n {input} -o {params.wd}/VerticalRefPos.tmp;
        sort -k2n {params.wd}/VerticalRefPos.tmp | uniq >{output.vref};
        #ls {params.wd}/*count.txt | xargs -n1 basename > {output.counts}
        ls {params.wd}/*count.txt > {output.counts}
    """
if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule create_verticalRef_reference:
        """
        Merge the separate ref files for reference genome
        """
        input:
            expand("%s/MPILEUP/mpileup_reference/{samples}.ref.txt" % (config["project-folder"]), samples=samples),
        output:
           vref=temp("%s/MPILEUP/mpileup_reference/VerticalRefPos.txt" % (config["project-folder"])),
           counts=temp("%s/MPILEUP/mpileup_reference/CountFileList.txt" % (config["project-folder"]))
        log:
           "%s/logs/step6_createVerticalRef_reference.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/step6_createVerticalRef_reference.benchmark.tsv" % (config["project-folder"])
        params:
            wd="%s/MPILEUP/mpileup_reference" % config["project-folder"],
        threads: 1
        shell:"""
            sort -u -m -k2n {input} -o {params.wd}/VerticalRefPos.tmp;
            sort -k2n {params.wd}/VerticalRefPos.tmp | uniq > {output.vref};
           # ls {params.wd}/*count.txt | xargs -n1 basename > {output.counts}
            ls {params.wd}/*count.txt > {output.counts}
        """
    
# Create the checkpoints to break out into parallel job
################################################################################
    
checkpoint cut_verticalRef:
    """
    Divide the input verticalRef-file for parallel processing
    """
    input:
       "%s/FASTQ/TRIMMED/VerticalRefPos.txt" % (config["project-folder"])
    output:
        temp(directory("%s/FASTQ/TRIMMED/VerticalRefPos/" % (config["project-folder"])))
    params:
        out="%s/FASTQ/TRIMMED/VerticalRefPos/VerticalRefPos." % (config["project-folder"]),
        split=1000000
    shell:"""
        mkdir -p {output}
        split -l {params.split} --numeric-suffixes {input} {params.out}
    """

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    checkpoint cut_verticalRef_reference:
        """
        Divide the input verticalRef-file for parallel processing
        """
        input:
           "%s/MPILEUP/mpileup_reference/VerticalRefPos.txt" % (config["project-folder"])
        output:
            temp(directory("%s/MPILEUP/mpileup_reference/VerticalRefPos/" % (config["project-folder"])))
        params:
            out="%s/MPILEUP/mpileup_reference/VerticalRefPos/VerticalRefPos." % (config["project-folder"]),
            split=1000000
        shell:"""
            mkdir -p {output}
            split -l {params.split} --numeric-suffixes {input} {params.out}
        """
        
# Create parallel MasterMatrix
################################################################################
    
rule create_MasterMatrix_parallel:
    """
    Process verticalRef parallel to create MAsterMatrix
    """
    input:
        verRef="%s/FASTQ/TRIMMED/VerticalRefPos/VerticalRefPos.{i}" % (config["project-folder"]),
        counts="%s/FASTQ/TRIMMED/CountFileList.txt" % (config["project-folder"])
    output:
        "%s/FASTQ/TRIMMED/VerticalRefPos/GSC.MasterMatrix_{i}.tsv" % (config["project-folder"])
    params:
        p=config["params"]["step6"]["p"],
        wd="%s/FASTQ/TRIMMED/VerticalRefPos" % config["project-folder"],
        pipefolder=config["pipeline-folder"]
    shell:"""
        cd {params.wd}
        perl {params.pipefolder}/scripts/GBS-SNP-CROP-6_2.pl -in {input.verRef} -count {input.counts} -out {output} -p {params.p}
     """

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule create_MasterMatrix_parallel_reference:
        """
        Process verticalRef parallel to create MAsterMatrix
        """
        input:
            verRef="%s/MPILEUP/mpileup_reference/VerticalRefPos/VerticalRefPos.{i}" % (config["project-folder"]),
            counts="%s/MPILEUP/mpileup_reference/CountFileList.txt" % (config["project-folder"])
        output:
            "%s/MPILEUP/mpileup_reference/VerticalRefPos/GSC.MasterMatrix_{i}.tsv" % (config["project-folder"])
        params:
            p=config["params"]["step6"]["p"],
            wd="%s/MPILEUP/mpileup_reference/VerticalRefPos" % config["project-folder"],
            pipefolder=config["pipeline-folder"]
        shell:"""
            cd {params.wd}
            perl {params.pipefolder}/scripts/GBS-SNP-CROP-6_2.pl -in {input.verRef} -count {input.counts} -out {output} -p {params.p}
         """
# Aggregate the parallel output
################################################################################

def aggregate_inputMasterMatrix(wildcards):
    """
    Aggregate the input object for the final MasterMatrix
    """
    checkpoint_outputMM = checkpoints.cut_verticalRef.get(**wildcards).output[0]
    return expand("%s/FASTQ/TRIMMED/VerticalRefPos/GSC.MasterMatrix_{i}.tsv" % (config["project-folder"]),
                  i=glob_wildcards(os.path.join(checkpoint_outputMM, "VerticalRefPos.{i}")).i)        

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    def aggregate_inputMasterMatrix_reference(wildcards):
        """
        Aggregate the input object for the final MasterMatrix
        """
        checkpoint_outputMM = checkpoints.cut_verticalRef_reference.get(**wildcards).output[0]
        return expand("%s/MPILEUP/mpileup_reference/VerticalRefPos/GSC.MasterMatrix_{i}.tsv" % (config["project-folder"]),
                      i=glob_wildcards(os.path.join(checkpoint_outputMM, "VerticalRefPos.{i}")).i)        

rule aggregate_MasterMatrix:
    input:
        aggregate_inputMasterMatrix
    output:
        temp("%s/FASTQ/TRIMMED/GSC.MasterMatrix.txt" % (config["project-folder"]))
    shell:"""
        cat {input} > {output}
    """    

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule aggregate_MasterMatrix_reference:
        input:
            aggregate_inputMasterMatrix_reference
        output:
            temp("%s/MPILEUP/mpileup_reference/GSC.MasterMatrix.txt" % (config["project-folder"]))
        shell:"""
            cat {input} > {output}
        """    