if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule Step0_0_star_create_index:
        """
        Create Genome Index - if available (STAR).
        """
        input:
            fasta="%s" % (config["genome"]),
        output:
            "%s/chrName.txt" % (config["genome-star-index"])
        log:
            "%s/logs/Step0_0/star_reference_index.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step0_0/star_reference_index.benchmark.tsv" % (config["project-folder"])
        threads: lambda cores: cpu_count()
        conda:"envs/star.yaml"
        singularity: config["singularity"]["star"]
        params: index="%s" % (config["genome-star-index"]),
        shell:"""
                echo "Number of threads used:" {threads}
                STAR --runThreadN {threads} --runMode genomeGenerate --genomeDir {params.index} --genomeFastaFiles {input.fasta} 2> {log}
        """
        
rule Step0_Concatenate_lanes:
    """
    Concatenate the demultiplexed fastq files (BASH).
    """
    input:
      R1=expand("%s/FASTQ/RAW/{rawsamples}_R1_001.fastq.gz" % (config["project-folder"]), rawsamples=rawsamples),
      R2=expand("%s/FASTQ/RAW/{rawsamples}_R2_001.fastq.gz" % (config["project-folder"]), rawsamples=rawsamples)
    output:
      R1=temp("%s/FASTQ/CONCATENATED/{samples}_R1_001.merged.fastq.gz" % (config["project-folder"])),
      R1Report="%s/FASTQ/CONCATENATED/{samples}_R1_001.merged.fastq.gz.report" % (config["project-folder"]),
      R2=temp("%s/FASTQ/CONCATENATED/{samples}_R2_001.merged.fastq.gz" % (config["project-folder"])),
      R2Report="%s/FASTQ/CONCATENATED/{samples}_R2_001.merged.fastq.gz.report" % (config["project-folder"])
    log:
        "%s/logs/Step0_1/catFastq_{samples}.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/Step0_1/{samples}.benchmark.tsv" % (config["project-folder"])
    threads: lambda cores: cpu_count()
    params:
       infolder="%s/FASTQ/RAW" % (config["project-folder"]),
       outfolder="%s/FASTQ/CONCATENATED" % (config["project-folder"])
    shell:"""
        echo "Number of threads used:" {threads}
        mkdir -p {params.outfolder}
        cat {params.infolder}/{wildcards.samples}*_R1_001.fastq.gz > {output.R1} 2> {log}
        ls {params.infolder}/{wildcards.samples}*_R1_001.fastq.gz > {output.R1Report} 2> {log}
        cat {params.infolder}/{wildcards.samples}*_R2_001.fastq.gz > {output.R2} 2> {log}
        ls {params.infolder}/{wildcards.samples}*_R2_001.fastq.gz > {output.R2Report} 2> {log}
  	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:  	
    rule Step0_2_bwa_create_index:
        """
        Index the Reference Genome - if available (BWA).
        """
        input:
            "%s" % (config["genome"])
        output:
            "%s" % (config["genome-bwa-index"])
        log:
            "%s/logs/Step0_2/bwa-fai-IndexReferenceGenome.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step0_2/bwaIndexReferenceGenome.benchmark.tsv" % (config["project-folder"])
        threads: lambda cores: cpu_count()
        conda:"envs/gbs.yaml"
        singularity: config["singularity"]["gbs"]
        shell:"""
                echo "Number of threads used:" {threads}
                bwa index -a bwtsw {input} 2> {log}
                samtools faidx {input} 2> {log}
      	"""
