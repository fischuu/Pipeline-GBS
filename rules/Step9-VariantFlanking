rule Step9_getVariantFlanking:
    """
    Get the flanking sequences from identified variants.
    """
    input:
        vcf="%s/FASTQ/TRIMMED/GSC.vcf" % (config["project-folder"]),
        genome="%s/FASTQ/TRIMMED/GSC.MR.Genome.fa" % (config["project-folder"])
    output:
        fl="%s/FASTQ/TRIMMED/GSC.vcf.flanking" % (config["project-folder"]),
        fa="%s/FASTQ/TRIMMED/GSC.vcf.fa" % (config["project-folder"])
    params:
        wd="%s/FASTQ/TRIMMED" % config["project-folder"],
        pipefolder=config["pipeline-folder"],
        flanking=config["params"]["step9"]["flanking"]
    log:
        "%s/logs/step9.log" % (config["project-folder"])
    benchmark:
        "%s/benchmark/step9.benchmark.tsv" % (config["project-folder"])
    shell:"""
        cd {params.wd}
        # Prepare the loci file
        {params.pipefolder}/scripts/getFastaFromVCF.sh {input.vcf} {params.flanking} {output.fl} {output.fa} {input.genome} 2> {log}
        cd ../..
  	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:
    rule Step9_0_getVariantFlanking_reference:
        """
        Get the flanking sequences from identified variants for reference genome.
        """
        input:
            vcf="%s/MPILEUP/mpileup_reference/GSC.vcf" % (config["project-folder"]),
            genome=config["genome"]
        output:
            fl="%s/MPILEUP/mpileup_reference/GSC.vcf.flanking" % (config["project-folder"]),
            fa="%s/MPILEUP/mpileup_reference/GSC.vcf.fa" % (config["project-folder"])
        params:
            wd="%s/MPILEUP/mpileup_reference" % config["project-folder"],
            pipefolder=config["pipeline-folder"],
            flanking=config["params"]["step9"]["flanking"]
        log:
            "%s/logs/step9_0.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/step9_0.benchmark.tsv" % (config["project-folder"])
        shell:"""
            cd {params.wd}
            # Prepare the loci file
            {params.pipefolder}/scripts/getFastaFromVCF.sh {input.vcf} {params.flanking} {output.fl} {output.fa} {input.genome} 2> {log}
            cd ../..
      	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:      	
    rule Step9_alignMockFlankingToReference:
        """
        Align the flanking sites from mock referene to reference genome.
        """
        input:
            flanking="%s/FASTQ/TRIMMED/GSC.vcf.fa" % (config["project-folder"]),
            reference="%s" % (config["genome"]),
            refFiles="%s" % (config["genome-bwa-index"]),
        output:
            "%s/SAM/mockVariantsToReference/mockVariantsToReference.sam" % (config["project-folder"])
        log:
            "%s/logs/Step9_alignMockFlankingToReference.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step9_alignMockFlankingToReference.benchmark.tsv" % (config["project-folder"])
        threads: 20
        shell:"""
            echo "Number of threads used:" {threads}
            bwa mem -t {threads} -M {input.reference} {input.flanking}> {output} 2> {log}
      	"""

if config["genome"] == "":
    print(f"No reference genome provided, skipping the star indexing step for reference genome")
else:  	
    rule Step9_SamToSortedBam_MockFlankingToReference:
        """
        Sam to sorted bam for flanking sites mapped toreference genome bam (SAMTOOLS)
        """
        input:
            "%s/SAM/mockVariantsToReference/mockVariantsToReference.sam" % (config["project-folder"])
        output:
            bam="%s/BAM/mockVariantsToReference/mockVariantsToReference.bam" % (config["project-folder"]),
            sorted="%s/BAM/mockVariantsToReference/mockVariantsToReference.sorted.bam" % (config["project-folder"])
        log:
            "%s/logs/Step9_SamToSortedBam_MockFlankingToReference.log" % (config["project-folder"])
        benchmark:
            "%s/benchmark/Step9_SamToSortedBam_MockFlankingToReference.benchmark.tsv" % (config["project-folder"])
        threads: lambda cores: 20
        params:
            q=config["params"]["step5d"]["q"],
            f=config["params"]["step5d"]["f"],
            F=config["params"]["step5d"]["F"]
        shell:"""
            echo "Number of threads used:" {threads}
            samtools view -b -q {params.q} -f {params.f} -F {params.F} {input} > {output.bam}
            samtools sort {output.bam} -o {output.sorted}
            samtools index {output.sorted}
      	"""
